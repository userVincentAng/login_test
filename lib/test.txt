//this is login_page sample code

import 'package:flutter/material.dart';
import 'package:food_ordering_app/features/home/screens/home_page.dart';
import 'package:food_ordering_app/features/login/screens/otp_verification_page.dart';
import 'package:food_ordering_app/features/login/screens/registration_page.dart';
import 'package:food_ordering_app/features/login/services/auth_service.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _formKey = GlobalKey<FormState>();
  final _mobileController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _isLoading = false;
  bool _showEmailPassword = false;
  String? _errorMessage;

  Future<void> _handleLogin() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      print('Starting login process...');
      // First check if user is registered
      final isRegistered = await AuthService.isUserRegistered(
        _mobileController.text,
      );
      print('User registration check completed. isRegistered: $isRegistered');

      // Send OTP
      print('Sending OTP...');
      final success = await AuthService.sendOTP(_mobileController.text);
      print('OTP send result: $success');

      if (!mounted) {
        print('Widget not mounted after OTP send');
        return;
      }

      if (success) {
        print('Navigating to OTP verification page...');
        // Navigate to OTP verification page using a simpler approach
        if (!mounted) return;

        // Show a snackbar to confirm OTP was sent
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('OTP sent successfully!'),
            duration: Duration(seconds: 2),
          ),
        );

        // Navigate to OTP verification page
        Navigator.push(
          context,
          MaterialPageRoute(
            builder:
                (context) => OTPVerificationPage(
                  mobileNumber: _mobileController.text,
                  onVerificationComplete: (isRegistered) {
                    print(
                      'OTP verification completed. isRegistered: $isRegistered',
                    );
                    if (isRegistered) {
                      // User is registered, navigate to home
                      Navigator.pushReplacement(
                        context,
                        MaterialPageRoute(builder: (_) => const HomePage()),
                      );
                    } else {
                      // User is not registered, navigate to registration
                      Navigator.pushReplacement(
                        context,
                        MaterialPageRoute(
                          builder:
                              (_) => RegistrationPage(
                                mobileNumber: _mobileController.text,
                              ),
                        ),
                      );
                    }
                  },
                ),
          ),
        );
        print('Navigation completed');
      } else {
        print('OTP send failed');
        setState(() {
          _errorMessage = 'Failed to send OTP. Please try again.';
        });
      }
    } catch (e) {
      print('Error during login: $e');
      if (!mounted) return;
      setState(() {
        _errorMessage = e.toString();
      });
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  void _handleEmailPasswordLogin() {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
      });

      // Simulate API call
      Future.delayed(const Duration(seconds: 2), () {
        setState(() {
          _isLoading = false;
        });

        // Navigate to Home page
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (_) => const HomePage()),
        );
      });
    }
  }

  @override
  void dispose() {
    _mobileController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [Color(0xFF00308F), Color(0xFF002366)],
          ),
        ),
        child: SafeArea(
          child: Center(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(24.0),
              child: Form(
                key: _formKey,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // Logo
                    Image.asset(
                      'lib/images/logoSplash.png',
                      width: 120,
                      height: 120,
                      fit: BoxFit.contain,
                      errorBuilder: (context, error, stackTrace) {
                        return const Icon(
                          Icons.restaurant,
                          size: 120,
                          color: Colors.white,
                        );
                      },
                    ),
                    const SizedBox(height: 40),

                    // Welcome Text
                    const Text(
                      'Welcome Back!',
                      style: TextStyle(
                        fontSize: 28,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      'Sign in to continue',
                      style: TextStyle(fontSize: 16, color: Colors.white70),
                    ),
                    const SizedBox(height: 40),

                    if (!_showEmailPassword) ...[
                      // Mobile Number Field
                      TextFormField(
                        controller: _mobileController,
                        keyboardType: TextInputType.phone,
                        style: const TextStyle(color: Colors.white),
                        decoration: InputDecoration(
                          hintText: 'Mobile Number',
                          hintStyle: TextStyle(
                            color: Colors.white.withOpacity(0.5),
                          ),
                          prefixIcon: const Icon(
                            Icons.phone,
                            color: Colors.white70,
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: BorderSide(
                              color: Colors.white.withOpacity(0.3),
                            ),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: const BorderSide(color: Colors.white),
                          ),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter your mobile number';
                          }
                          if (!RegExp(r'^09\d{9}$').hasMatch(value)) {
                            return 'Mobile number must be 11 digits and start with 09';
                          }
                          return null;
                        },
                      ),
                      const SizedBox(height: 16),

                      // Switch to Email/Password Login
                      TextButton(
                        onPressed: () {
                          setState(() {
                            _showEmailPassword = true;
                          });
                        },
                        child: const Text(
                          'Login using email and password',
                          style: TextStyle(color: Colors.white70),
                        ),
                      ),
                      const SizedBox(height: 24),

                      // Continue Button
                      SizedBox(
                        width: double.infinity,
                        height: 50,
                        child: ElevatedButton(
                          onPressed: _isLoading ? null : _handleLogin,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.white,
                            foregroundColor: const Color(0xFF00308F),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child:
                              _isLoading
                                  ? const CircularProgressIndicator()
                                  : const Text(
                                    'Continue',
                                    style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                        ),
                      ),
                    ] else ...[
                      // Email Field
                      TextFormField(
                        controller: _emailController,
                        keyboardType: TextInputType.emailAddress,
                        style: const TextStyle(color: Colors.white),
                        decoration: InputDecoration(
                          hintText: 'Email',
                          hintStyle: TextStyle(
                            color: Colors.white.withOpacity(0.5),
                          ),
                          prefixIcon: const Icon(
                            Icons.email,
                            color: Colors.white70,
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: BorderSide(
                              color: Colors.white.withOpacity(0.3),
                            ),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: const BorderSide(color: Colors.white),
                          ),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter your email';
                          }
                          if (!value.contains('@')) {
                            return 'Please enter a valid email';
                          }
                          return null;
                        },
                      ),
                      const SizedBox(height: 20),

                      // Password Field
                      TextFormField(
                        controller: _passwordController,
                        obscureText: true,
                        style: const TextStyle(color: Colors.white),
                        decoration: InputDecoration(
                          hintText: 'Password',
                          hintStyle: TextStyle(
                            color: Colors.white.withOpacity(0.5),
                          ),
                          prefixIcon: const Icon(
                            Icons.lock,
                            color: Colors.white70,
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: BorderSide(
                              color: Colors.white.withOpacity(0.3),
                            ),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: const BorderSide(color: Colors.white),
                          ),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter your password';
                          }
                          if (value.length < 6) {
                            return 'Password must be at least 6 characters';
                          }
                          return null;
                        },
                      ),
                      const SizedBox(height: 12),

                      // Forgot Password
                      Align(
                        alignment: Alignment.centerRight,
                        child: TextButton(
                          onPressed: () {
                            // TODO: Implement forgot password
                          },
                          child: const Text(
                            'Forgot Password?',
                            style: TextStyle(color: Colors.white70),
                          ),
                        ),
                      ),
                      const SizedBox(height: 16),

                      // Switch to Mobile Login
                      TextButton(
                        onPressed: () {
                          setState(() {
                            _showEmailPassword = false;
                          });
                        },
                        child: const Text(
                          'Login using mobile number',
                          style: TextStyle(color: Colors.white70),
                        ),
                      ),
                      const SizedBox(height: 24),

                      // Login Button
                      SizedBox(
                        width: double.infinity,
                        height: 50,
                        child: ElevatedButton(
                          onPressed:
                              _isLoading ? null : _handleEmailPasswordLogin,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.white,
                            foregroundColor: const Color(0xFF00308F),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child:
                              _isLoading
                                  ? const CircularProgressIndicator()
                                  : const Text(
                                    'Login',
                                    style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                        ),
                      ),
                    ],

                    const SizedBox(height: 24),

                    // Sign Up Option
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Text(
                          "Don't have an account? ",
                          style: TextStyle(color: Colors.white70),
                        ),
                        TextButton(
                          onPressed: () {
                            // Navigate to registration page
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (_) => const RegistrationPage(),
                              ),
                            );
                          },
                          child: const Text(
                            'Sign Up',
                            style: TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}



// this is auth_service sample code
import 'package:http/http.dart' as http;
import 'dart:convert';

class AuthService {
  static const String _baseUrl = 'http://test.shoppazing.com/api';
  static const String _accessToken =
      'SSok_bIy9BxyVT6KgvdDasI3rZtyw12oiBk6MjFxuv5XDFPOCJemaeLEIGUk82j9oZdV5-o8hdx01EeD9nHmjPzpv4BG6tz2uWnxochE01cMy3xlvUHasQIl2ploqmhcIQwtrDbN5fB6TgeNSKsCGFIdDGuilirk6ptSpCGfF_iIYJ95MvysjWjO_RRyNW6JoVZP_ESfSslFHlK0mu1liodvbf58s03uILApB_p1s7MnbZiZD1LNTMHpDRY0LE-qkHJmDGIErokFfNqaZkYDoSP_zmtOaWXN5JhPcFepQNmJBrdAzRqWYA4mfD-Pc3JXQ6nXf2Ucfswfqrr71AMvBLm14biCSfTvAIYPtb4sOzHC__GxgJ4_q98UFhX4nzwm0P3gs0_CKScyzpONiU7LeaD4ULSAUJ9d4eX0otToWMwbCFLu2d5zMNwEykigNl1L7GiZtXWML7qUaUhB0SGlhi6BVNypZhx5XIZxRQPIPLI5NFZiD8gt-eIHcLdsLeTA_H1lSjLcrMf26yTWctI6Vu7Iivu7ndocHUUJ7PBRkMyaBSThCD7MaHkbH6Fyo67a7t8pwF1HWT7HOj9od9m1GbAxCDRjsUkAM4gegnV1mBmth1BikwO30qUm9aja66FYZO6iLoLlhS8SDZ9XSKbDo7PyBos2us1kV-tE950WfiI';

  static Future<bool> authenticate() async {
    // Always return true since we're using a static token
    return true;
  }

  static Map<String, String> getAuthHeaders() {
    return {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer $_accessToken',
    };
  }

  static Future<bool> logout() async {
    // In a real app, this would clear tokens, etc.
    // For now, just return true to simulate successful logout
    return true;
  }

  static Future<bool> isUserRegistered(String mobileNumber) async {
    try {
      print('Checking if user is registered: $mobileNumber');
      final response = await http.post(
        Uri.parse('$_baseUrl/shop/registeruser'),
        headers: getAuthHeaders(),
        body: jsonEncode({
          'UserId': '0',
          'MobileNo': mobileNumber,
          'Email': '',
          'Name': '',
          'Password': '',
          'AppHash': 'h234shsw',
        }),
      );

      print('Register check Response Status: ${response.statusCode}');
      print('Register check Response Body: ${response.body}');

      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        return responseData['isRegistered'] ?? false;
      }
      return false;
    } catch (e) {
      print('Error checking user registration: $e');
      rethrow;
    }
  }

  static Future<bool> sendOTP(String mobileNumber) async {
    try {
      print('Sending OTP to: $mobileNumber');
      final response = await http.post(
        Uri.parse('$_baseUrl/shop/loginbyotp'),
        headers: getAuthHeaders(),
        body: jsonEncode({
          'UserId': '',
          'MobileNo': mobileNumber,
          'AppHash': 'h234shsw',
        }),
      );

      print('OTP Response Status: ${response.statusCode}');
      print('OTP Response Body: ${response.body}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        final responseData = jsonDecode(response.body);
        // Check if the response indicates success
        return responseData['status_code'] == 200 ||
            responseData['message'] == 'Ok';
      }

      // If we get a specific error response, throw it
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['message'] ?? 'Failed to send OTP');
    } catch (e) {
      print('Error sending OTP: $e');
      rethrow;
    }
  }

  static Future<bool> verifyOTP(String mobileNumber, String otp) async {
    try {
      print('Verifying OTP for: $mobileNumber with OTP: $otp');
      final requestBody = {'UserId': '', 'MobileNo': mobileNumber, 'OTP': otp};
      print('Request body: $requestBody');

      final response = await http.post(
        Uri.parse('$_baseUrl/shop/verifyotplogin'),
        headers: getAuthHeaders(),
        body: jsonEncode(requestBody),
      );

      print('Verify OTP Response Status: ${response.statusCode}');
      print('Verify OTP Response Body: ${response.body}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        final responseData = jsonDecode(response.body);
        print('Parsed response data: $responseData');

        // Check various success indicators
        if (responseData['status_code'] == 200 ||
            responseData['message'] == 'Ok' ||
            responseData['success'] == true ||
            responseData['isVerified'] == true) {
          return true;
        }

        // If we get here, the OTP was not accepted
        print('OTP verification failed. Response data: $responseData');
        throw Exception(responseData['message'] ?? 'Invalid OTP');
      }

      // If we get a specific error response, throw it
      final errorBody = jsonDecode(response.body);
      print('Error response body: $errorBody');
      throw Exception(errorBody['message'] ?? 'Failed to verify OTP');
    } catch (e) {
      print('Error verifying OTP: $e');
      rethrow;
    }
  }
}


//this is otp_verification_page sample code
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:io';
import '../services/auth_service.dart';
import 'registration_page.dart';
import '../../home/screens/home_page.dart';

class OTPVerificationPage extends StatefulWidget {
  final String mobileNumber;
  final Function(bool isRegistered) onVerificationComplete;

  const OTPVerificationPage({
    super.key,
    required this.mobileNumber,
    required this.onVerificationComplete,
  });

  @override
  State<OTPVerificationPage> createState() => _OTPVerificationPageState();
}

class _OTPVerificationPageState extends State<OTPVerificationPage> {
  final List<TextEditingController> _otpControllers = List.generate(
    6,
    (index) => TextEditingController(),
  );
  final List<FocusNode> _focusNodes = List.generate(6, (index) => FocusNode());
  bool _isLoading = false;
  int _remainingTime = 60;
  bool _canResend = false;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    _startTimer();
  }

  void _startTimer() {
    Future.delayed(const Duration(seconds: 1), () {
      if (mounted && _remainingTime > 0) {
        setState(() {
          _remainingTime--;
        });
        _startTimer();
      } else if (mounted) {
        setState(() {
          _canResend = true;
        });
      }
    });
  }

  void _resendOTP() {
    if (!_canResend) return;

    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    // Simulate resending OTP
    Future.delayed(const Duration(seconds: 2), () {
      if (mounted) {
        setState(() {
          _isLoading = false;
          _canResend = false;
          _remainingTime = 60;
        });
        _startTimer();

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('OTP has been resent to your mobile number'),
            backgroundColor: Colors.green,
          ),
        );
      }
    });
  }

  void _verifyOTP() async {
    // Collect OTP from all fields
    final otp = _otpControllers.map((c) => c.text).join();

    if (otp.length != 6) {
      setState(() {
        _errorMessage = 'Please enter the complete OTP';
      });
      return;
    }

    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      // Use the actual API verification
      final isVerified = await AuthService.verifyOTP(widget.mobileNumber, otp);
      
      if (isVerified) {
        // Check if user is registered using the API
        final isRegistered = await AuthService.isUserRegistered(widget.mobileNumber);
        widget.onVerificationComplete(isRegistered);
      } else {
        setState(() {
          _errorMessage = 'Invalid OTP. Please try again.';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = e.toString();
      });
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  void dispose() {
    for (var controller in _otpControllers) {
      controller.dispose();
    }
    for (var node in _focusNodes) {
      node.dispose();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [Color(0xFF00308F), Color(0xFF002366)],
          ),
        ),
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(24.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'OTP Verification',
                  style: TextStyle(
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  'Enter the 6-digit code sent to ${widget.mobileNumber}',
                  style: const TextStyle(fontSize: 16, color: Colors.white70),
                ),
                const SizedBox(height: 40),

                // OTP Input Fields
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: List.generate(
                    6,
                    (index) => SizedBox(
                      width: 45,
                      child: TextField(
                        controller: _otpControllers[index],
                        focusNode: _focusNodes[index],
                        textAlign: TextAlign.center,
                        keyboardType: TextInputType.number,
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                        ),
                        decoration: InputDecoration(
                          filled: true,
                          fillColor: Colors.white.withOpacity(0.1),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: BorderSide.none,
                          ),
                          counterText: '',
                        ),
                        inputFormatters: [
                          FilteringTextInputFormatter.digitsOnly,
                          LengthLimitingTextInputFormatter(1),
                        ],
                        onChanged: (value) {
                          if (value.isNotEmpty && index < 5) {
                            _focusNodes[index + 1].requestFocus();
                          } else if (value.isEmpty && index > 0) {
                            _focusNodes[index - 1].requestFocus();
                          }
                        },
                      ),
                    ),
                  ),
                ),

                if (_errorMessage != null) ...[
                  const SizedBox(height: 16),
                  Text(
                    _errorMessage!,
                    style: const TextStyle(color: Colors.red, fontSize: 14),
                  ),
                ],

                const SizedBox(height: 24),

                // Verify Button
                SizedBox(
                  width: double.infinity,
                  height: 50,
                  child: ElevatedButton(
                    onPressed: _isLoading ? null : _verifyOTP,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.white,
                      foregroundColor: const Color(0xFF00308F),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child:
                        _isLoading
                            ? const CircularProgressIndicator()
                            : const Text(
                              'Verify',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                  ),
                ),

                const SizedBox(height: 24),

                // Resend OTP
                Center(
                  child: TextButton(
                    onPressed: _canResend ? _resendOTP : null,
                    child: Text(
                      _canResend
                          ? 'Resend OTP'
                          : 'Resend OTP in $_remainingTime seconds',
                      style: TextStyle(
                        color: _canResend ? Colors.white : Colors.white70,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
